<?php

use \Drupal\insider_events\Controller\InsiderEventsController;
/**
 * Implements hook_preprocess().
 *
 * Setting up variables for our events content type - to use in iCal templating work.
 */
function insider_events_preprocess(&$variables, $hook) {
  // Only if this is a page hook, and we have an event style node.
  if($hook == 'page' && isset($variables['node']) && $variables['node']->getType() == 'event') {
    // create an event object
    $this_event = [
      'description' => $variables['node']->get('body')->value,
      'event_title' => isset($variables['node']->get('title')->value) ? $variables['node']->get('title')->value : null,
      'event_location' => isset($variables['node']->get('field_event_location')->value) ? $variables['node']->get('field_event_location')->value : null,
      'event_online_link_uri' => isset($variables['node']->get('field_event_online')->uri) ? $variables['node']->get('field_event_online')->uri : null,
      'event_onine_link_text' => isset($variables['node']->get('field_event_online')->title) ? $variables['node']->get('field_event_online')->title : null,
      'event_nid' => isset($variables['node']->get('nid')->value) ? $variables['node']->get('nid')->value : null
    ];

    // Use this var to set datetimes sub-array.
    //ksm($variables);
    $times = $variables['node']->get('field_when')->getIterator();
    // Now check if we have recurring events.
    if (count($times) > 1) {
      $this_event['recurring'] = [];
      foreach ($times as $time) {
        // Grab our date data.
        $this_event['recurring'][] = $time->getValue();
      }
      // pop off our first array and grab our original start and end times
      $first_event = array_shift($this_event['recurring']);
      $this_event['start_datetime'] = $first_event['value'];
      $this_event['end_datetime'] = $first_event['end_value'];
    } else {
      // No recurrance, just grab start and end times.
      $this_event['start_datetime'] = $variables['node']->get('field_when')->value;
      $this_event['end_datetime'] = $variables['node']->get('field_when')->end_value;
    }

    // This uses zapcalendar library: https://packagist.org/packages/liliumdev/icalendar via composer.
    // Additional functionality and classes built by Thayne.
    //$ical_file = new InsiderEventsController($this_event);
    //$ical_url = $ical_file->get_ical_url();
    //$url = $ical_url->url();
    //$variables['event']['url'] = $url;
    // TODO: include a calendar icon.
    //$variables['event']['icon'] = '';
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function insider_events_form_node_event_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'insider_events_set_rrule';
}

/**
 * Submit handler to collect true rrules from DB.
 * Strangely, smart date does not seem to have an API method for this.
 * If we have a rrule, then we can gen an iCal file, and save teh location
 * in a text field we have hidden.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function insider_events_set_rrule(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Gather fields.
  $event_fields = $form_state->getFormObject()->getEntity();
  // Call to get the rule.
  $rule = insider_events_get_rrules($form_state);

  // create an event object.
  // Collect fields to pass to iCal gen.
  $this_event = [
    'description' => $event_fields->get('body')->value,
    'event_title' => $event_fields->get('title')->value,
    'event_location' => $event_fields->get('field_event_location')->value,
    'event_online_link_uri' => $event_fields->get('field_event_online')->uri,
    'event_onine_link_text' => $event_fields->get('field_event_online')->title,
    'event_nid' => $event_fields->get('nid')->value,
    'start_datetime' => $event_fields->get('field_when')->value,
    'end_datetime' => $event_fields->get('field_when')->end_value,
    'recurring' => $rule
  ];

  // This uses zapcalendar library: https://packagist.org/packages/liliumdev/icalendar via composer.
  // Additional functionality and classes built by Thayne.
  $ical_file = new InsiderEventsController($this_event);
  $ical_url = $ical_file->get_ical_url();
  $url = $ical_url->url();
  ksm($url);
  //ksm($form_state);
  //TODO: Collect fields to pass to iCal gen.
  //TODO: Save iCal location into a text field.
  //

}

/**
 * Helper function to pull rrule from DB.
 * @param $form_state
 * @return string|null
 * TODO: Should this be moved to the controller? Or it's own class?
 */
function insider_events_get_rrules($form_state) {
  $smart_date = $form_state->getFormObject()->getEntity()->get('field_when')->getValue();
  // Check if we have an rrule.
  if(!isset($smart_date[0]['rrule'])) {
    return null;
  }
  // Extract the rid.
  $rid = $smart_date[0]['rrule'];
  // Query our rrule
  $database = \Drupal::database();
  $query = $database->select('smart_date_rule', 'sd')
    ->condition('sd.rid', $rid, '=')
    ->fields('sd', ['rule']);
  $result = $query->execute();
  if(isset($result)) {
    // Fetch and return just the rule value.
    return $result->fetchField();
  }
  return null;
}
