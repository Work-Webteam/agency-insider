<?php

use \Drupal\insider_events\Controller\InsiderEventsController;
use Liliumdev\ICalendar\ZDateHelper;

/**
 * Implements hook_preprocess().
 *
 * Setting up variables for our events content type - to use in iCal templating work.
 * @param $variables
 * @param $hook
 */
function insider_events_preprocess(&$variables, $hook) {
  // Only if this is a page hook, and we have an event style node.
  if($hook == 'page' && isset($variables['node']) && $variables['node']->getType() == 'event') {
    // create an event object
    $this_event = [
      'description' => $variables['node']->get('body')->value,
      'event_title' => isset($variables['node']->get('title')->value) ? $variables['node']->get('title')->value : null,
      'event_location' => isset($variables['node']->get('field_event_location')->value) ? $variables['node']->get('field_event_location')->value : null,
      'event_online_link_uri' => isset($variables['node']->get('field_event_online')->uri) ? $variables['node']->get('field_event_online')->uri : null,
      'event_online_link_text' => isset($variables['node']->get('field_event_online')->title) ? $variables['node']->get('field_event_online')->title : null,
      'event_nid' => isset($variables['node']->get('nid')->value) ? $variables['node']->get('nid')->value : null
    ];
    //ksm($variables['node']);
    // Use this var to set date times sub-array.
    //ksm($variables);
    $times = $variables['node']->get('field_when')->getIterator();
    // Now check if we have recurring events.
    if (count($times) > 1) {
      $this_event['recurring'] = [];
      foreach ($times as $time) {
        // Grab our date data.
        $this_event['recurring'][] = $time->getValue();
      }
      // pop off our first array and grab our original start and end times
      $first_event = array_shift($this_event['recurring']);
      $this_event['start_datetime'] = $first_event['value'];
      $this_event['end_datetime'] = $first_event['end_value'];
    } else {
      // No recurrence, just grab start and end times.
      $this_event['start_datetime'] = $variables['node']->get('field_when')->value;
      $this_event['end_datetime'] = $variables['node']->get('field_when')->end_value;
    }

    // This uses zapcalendar library: https://packagist.org/packages/liliumdev/icalendar via composer.
    // Additional functionality and classes built by Thayne.
    //$ical_file = new InsiderEventsController($this_event);
    //$ical_url = $ical_file->get_ical_url();
    //$url = $ical_url->url();
    //$variables['event']['url'] = $url;
    // TODO: include a calendar icon.
    //$variables['event']['icon'] = '';
  }
}



function insider_events_form_node_event_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'insider_events/insider_events';
  array_unshift($form['actions']['submit']['#submit'], 'insider_events_set_rrule');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function insider_events_form_node_event_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'insider_events/insider_events';
  array_unshift($form['actions']['submit']['#submit'], 'insider_events_set_rrule');
}

/**
 * Submit handler to collect true rrules from DB.
 * Strangely, smart date does not seem to have an API method for this.
 * If we have a rrule, then we can gen an iCal file, and save teh location
 * in a text field we have hidden.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function insider_events_set_rrule(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Gather fields.
  $event_fields = $form_state->getFormObject()->getEntity();
  // check if we have an rrule.
  $rrule = get_first_rrule($event_fields);

  // Call to get the rule.
  if(isset($rrule) && $rrule['rrule'] !== null) {
    $rule = insider_events_get_rrules($event_fields);
    if(strpos($rule, 'UNTIL') !== false) {
      ksm($rule);
      $rule = parse_rule_string($rule);
    }
  } else {
    $rule = null;
  }

  // Gather any and all extra rules that are not recurring.
  $rdate = insider_events_get_extra_dates($event_fields);

  // create an event object.
  // Collect fields to pass to iCal gen.
  $this_event = [
    'description' => $event_fields->get('body')->value,
    'event_title' => $event_fields->get('title')->value,
    'event_location' => $event_fields->get('field_event_location')->value,
    'event_online_link_uri' => $event_fields->get('field_event_online')->uri,
    'event_online_link_text' => $event_fields->get('field_event_online')->title,
    'event_nid' => $event_fields->get('nid')->value,
    'start_datetime' => isset($rrule['start']) ? $rrule['start'] : $event_fields->get('field_when')->value,
    'end_datetime' => isset($rrule['end']) ? $rrule['end'] : $event_fields->get('field_when')->end_value,
    'recurring' => $rule,
    'rdate' => $rdate
  ];

  // This uses zapcalendar library: https://packagist.org/packages/liliumdev/icalendar via composer.
  // Additional functionality and classes built by Thayne.
  $ical_file = new InsiderEventsController($this_event);
  $ical_url = $ical_file->get_ical_url();
  $url = $ical_url->url();
  //ksm($form_state);
  ksm($url);
  //TODO: Save iCal location into a text field.
  $form_state->setValue('field_event_ical_path', [['value'=>$url]]);

}

/**
 * Helper function to pull rrule from DB.
 * @param $event_fields
 * @return string|null
 * TODO: Should this be moved to the controller? Or it's own class?
 */
function insider_events_get_rrules($event_fields) {
  // Check if we have an rrule.
  $rrule = get_first_rrule($event_fields);
  $rid = $rrule['rrule'];
  // Return null if no rrule.
  if($rid === null) {
    return null;
  }
  // Query our rrule
    $database = \Drupal::database();
  $query = $database->select('smart_date_rule', 'sd')
    ->condition('sd.rid', $rid, '=')
    ->fields('sd', ['rule']);
  $result = $query->execute();
  if(isset($result)) {
    // Fetch and return just the rule value.
    return $result->fetchField();
  }
  return null;
}

/**
 * @param $event_fields
 * @return array|null
 */
function insider_events_get_extra_dates($event_fields) {
  // Grab our iterator.
  $events = $event_fields->get('field_when')->getIterator();
  // Have multiple dates, so lets see if we need any rdates.
  $rules = [];
  $rrule = get_first_rrule($event_fields);
  $rrule_key = $rrule['rrule'];
    // Go through our iterator.
  foreach($events as $event) {
    $values = $event->getValue();
    // If we already have an rrule, then continue to next iterator.
    if($rrule_key !== null && isset($values['rrule']) && $rrule_key == $values['rrule']){
      continue;
    }
    // Next check if we have and rrule, and if it is a different rule than our initial one.
    if($rrule_key !== null && isset($values['rrule']) && $rrule_key != $values['rrule']) {
      $rules[] = [
        'start' => $values['value'],
        'end' => $values['end_value']
        ];
    }
    // If we don't have an rrule - we still want the start and end if they exist.
    // This field is set as "Null" in the case of no rule.
    if(isset($values['value'], $values['end_value']) && $values['rrule'] === null) {
      $rules[] = [
        'start' => $values['value'],
        'end' => $values['end_value']
      ];
    }
  }
  // Return an array of additional rules if it exists.
  if(!empty($rules)) {
    return $rules;
  }
  // We didn't get a hit on rrules, return null.
  return null;
}

/**
 * @param $event_fields
 * @return mixed|null
 */
function get_first_rrule($event_fields){
  $rrule['rrule'] = null;
  $events = $event_fields->get('field_when')->getIterator();
  foreach($events as $event) {
    $values = $event->getValue();
    if(isset($values['rrule']) && $values['rrule'] !== null) {
      $rrule['rrule'] = $values['rrule'];
      $rrule['start'] = $values['value'];
      $rrule['end'] = $values['end_value'];
      break;
    }
  }
  return $rrule;
}

/**
 * @param $rule
 * @return false|int|null
 *
 * Our rules are saved with a static human readable date - we cannot use these with ZapCalendar
 * library, so here we convert that value into a unix timestamp.
 */
function parse_rule_string($rule) {
  $rules = explode(';', $rule);
  $return_date = null;
  foreach($rules as $k=>$v) {
    if(strpos($v, 'UNTIL') !== false) {
      $date = explode('=', $v);
      $new_date = update_date($date[1]);
      // Get rid of the bad formatting.
      array_pop($date);
      $date[] = $new_date;
      $v = implode('=', $date);
      $rules[$k]=$v;
    }
  }
  $return_date = implode(';', $rules);
  ksm($return_date);
  return $return_date;
}

/**
 * @param $date
 * @return false|int
 */
function update_date($date) {
  // Switch to unix timestamp.
  $date = strtotime($date);
  // Use ZapCalendar library to make this a proper ical date.
  $date = ZDateHelper::fromUniqDateTimetoiCal($date) . 'Z';
  return $date;
}
